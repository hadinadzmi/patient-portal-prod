@page "/requestappointment"
@using System
@using Blazored.LocalStorage
@using Telerik.Blazor.Components
@inject ActivePageService ActivePageService
@inherits McComponentBase
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IModalService Modal
@inject IConfiguration Configuration
@inject ILocalStorageService LocalStorage
@inject ISyncLocalStorageService LocalStorageSync
@inject IJSRuntime JSRuntime;
@inject IStringLocalizer<Resource> Localizer
@inject HttpClient _httpClient
@using System.Globalization

<h3>Request for your appointment now</h3>
<p class="account-info" style="text-align:center; margin-bottom: 1.5rem;">
    <strong>Have you registered with us before?</strong><br />
    If yes, please <a href="/login"><strong>log in to your account</strong></a> to book an appointment.
</p>

@if (IsBusy)
{
    <div class="overlay">
        <McBusyIndicator />
    </div>
}

@if (showSuccessModal || showErrorModal)
{
    <div class="modal-overlay">
        <div class="modal">
            <h3>@(showSuccessModal ? "Success" : "Error")</h3>
            <p>@modalMessage</p>
            <div class="modal-actions">
                <button class="btn confirm @(isButtonEnabled ? "" : "disabled")" @onclick="CloseModal" disabled="@(isButtonEnabled ? false : true)">
                    @(isButtonEnabled ? "Okay" : $"{countdown} seconds...")
                </button>
            </div>
        </div>
    </div>
}

<EditForm Model="formModel" OnValidSubmit="HandleValidSubmit">
    <fieldset>
        <legend>Appointment Information</legend>
        <div class="hospital-location">
            <label for="hospitalLocation">Hospital Location: <span class="required">*</span></label>
            <select id="hospitalLocation" name="hospitalLocation" @onchange="OnTenantChanged">
                <option value="" disabled selected>Please Select Hospital Location</option>
                @foreach (var tenant in tenantList)
                {
                    <option value="@tenant.TenantId">@tenant.TenantName</option>
                }
            </select>
        </div>
        <div class="flex-container">
            <div class="department-selection">
                <label for="department">Specialty: <span class="required">*</span></label>
                <select id="department" name="department" @onchange="OnDepartmentChanged">
                    <option value="" disabled selected>Please Select Specialty</option>
                    @foreach (var dept in filteredDepartmentList)
                    {
                        <option value="@dept.DepartmentId" selected="@(dept.DepartmentId == selectedDepartmentId)">
                            @dept.DepartmentName
                        </option>
                    }
                </select>
            </div>
            <div>
                <label for="doctor">Doctor: <span class="required">*</span></label>
                <select id="doctor" name="doctor" @onchange="OnDoctorChanged">
                    <option value="" disabled selected>Please Select Doctor</option>
                    @foreach (var doc in filteredDoctorList)
                    {
                        <option value="@doc.ServiceUnitId" selected="@(doc.ServiceUnitId == selectedDoctorId)">
                            @doc.ServiceUnitName
                        </option>
                    }
                </select>
            </div>
        </div>
        <div class="flex-container">
            <div>
                <label for="preferredTime">Preferred Date: <span class="required">*</span></label>
                <div class="calendar">
                    <div class="calendar-header">
                        <button type="button" @onclick="PreviousMonth" disabled="@IsCurrentMonth()">&lt;</button>
                        <span>@currentMonth.ToString("MMMM yyyy", CultureInfo.InvariantCulture)</span>
                        <button type="button" @onclick="NextMonth">&gt;</button>
                    </div>
                    <div class="calendar-body">
                        @foreach (var day in daysOfWeek)
                        {
                            <div class="calendar-day calendar-day-header">@day</div>
                        }
                        @* Calculate the number of empty cells before the first day of the month *@
                        @{
                            var firstDayOfMonth = new DateTime(currentMonth.Year, currentMonth.Month, 1);
                            var emptyCells = (int)firstDayOfMonth.DayOfWeek;
                        }
                        @* Render empty cells *@
                        @for (int i = 0; i < emptyCells; i++)
                        {
                            <div class="calendar-day empty"></div>
                        }
                        @* Render the actual days of the month *@
                        @foreach (var day in GetDaysInMonth())
                        {
                            <div class="calendar-day @GetDayClass(day)"
                                 @onclick="async () => await SelectDate(day)"
                                 disabled="@IsPastDate(day)">
                                @day.Day
                            </div>
                        }
                    </div>
                    <div class="selected-date">
                        @if (selectedDate != DateTime.MinValue)
                        {
                            <span>Selected Date: @selectedDate.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture)</span>
                        }
                    </div>
                </div>
            </div>
            <div>
                <label for="preferredTime">Preferred Time: <span class="required">*</span></label>
                <div class="time-selection">
                    @foreach (var time in GetTimeSlots())
                    {
                        var isBlocked = blockedTimeSlots.Contains(time);
                        var isUnavailable = unavailableTimeSlots.Contains(time);

                        bool shouldDisable = selectedDoctorId != null && (isUnavailable || isBlocked);

                        <button type="button"
                                class="time-button @(selectedTime == time ? "selected" : "") @(isUnavailable ? "unavailable" : "") @(isBlocked ? "blocked" : "")"
                                @onclick="() => SelectTime(time)"
                                disabled="@shouldDisable">
                            @time
                        </button>
                    }
                </div>
                <input type="hidden" id="preferredTime" name="preferredTime" value="@selectedTime" />
                <div class="legend">
                    <div class="legend-item">
                        <span class="legend-color available"></span> Available
                    </div>
                    <div class="legend-item">
                        <span class="legend-color unavailable"></span> Not Available
                    </div>
                    <div class="legend-item">
                        <span class="legend-color blocked"></span> Blocked
                    </div>
                </div>
            </div>
        </div>
    </fieldset>

    <fieldset>
        <legend>Personal Information</legend>
@*             
        <div >
            <label>Payment Method: <span class="required">*</span></label>
                <div class="radio-container">
                    <input type="radio" id="selfPay" name="paymentMethod" value="selfPay" @onchange="OnPaymentMethodChanged" />
                    <label for="selfPay">Self-Pay</label>
                </div>
                <div class="radio-container">
                    <input type="radio" id="insurance" name="paymentMethod" value="insurance" @onchange="OnPaymentMethodChanged" />
                    <label for="insurance">Guarantee Letter / Insurance</label>
                </div> *@
@*         </div>
        @if (isInsuranceSelected)
        {
            <div>
                <label for="insuranceFile">Upload Guarantee Letter / Insurance Document:</label>
                <input type="file" id="insuranceFile" name="insuranceFile" />
            </div>
        }
        *@
            <div>
            <label for="yourName">Your Name (According to NRIC / Passport): <span class="required">*</span></label>
                <input type="text" id="yourname" name="yourName" @bind="formModel.PatientName"></input>
            </div>
            <label for="phoneNumber">Mobile Number: <span class="required">*</span></label>
            <input type="text" id="phoneNumber" name="additionalMessage" @bind="formModel.PatientMobileNumber" placeholder="+60198868889"></input>
            <div>
                <label for="identificationNumber">NRIC / Passport Number: </label>
                <input type="text" id="identificationNumber" name="identificationNumber" @bind="formModel.PatientNricPassport" placeholder="990425011111"></input>
            </div>
            <div>
            </div>
    </fieldset>

    <div class="button-container">
        <button type="submit" class="book-now-button">Request Now</button>
    </div>
</EditForm>