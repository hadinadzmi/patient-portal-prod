//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using PatientPortalBackend.Models.MedCubesModels.Core;

#if SILVERLIGHT
#endif
using System.ComponentModel.DataAnnotations;


namespace MedCubes.Appointment.Server.Models.MedCubesModels
{
    /// <summary>
    /// Attention!!!
    /// Place new functionality into separate partial class as this class-file will be recreated
    /// if tt procedure is executed again (your modifications would be lost)!
    /// </summary>
    [DataContract(Name = "AppointmentRequestCount", Namespace = "www.Ahcs.co/MedCubes/models")]

    public partial class AppointmentRequestCount : DomainBaseModel
    {
        #region Constants
        public static readonly string PKID = "PkId";
        public static readonly string CUSTOMERID = "CustomerId";
        public static readonly string TENANTID = "TenantId";
        public static readonly string RECORDSTATE = "RecordState";
        public static readonly string ROWVERSION = "RowVersion";
        public static readonly string ISIDENTIFIED = "IsIdentified";
        public static readonly string DATEREQUESTED = "DateRequested"; //need
        public static readonly string REQUESTCOUNT = "RequestCount";
        public static readonly string PATIENTID = "PatientId"; // need
        public static readonly string HARDWAREID = "HardwareId";
        public static readonly string PATIENTHASH = "PatientHash";
        public static readonly string STARTDATETIME = "StartDateTime"; //need
        public static readonly string ENDDATETIME = "EndDateTime"; //need
        public static readonly string ONBEHALFSTATUS = "OnBehalfStatus"; //need
        public static readonly string REQLASTNAME = "ReqLastName"; //need
        public static readonly string LASTNAME = "LastName"; //need
        public static readonly string IDENTITYDOCUMENTNUMBER = "IdentityDocumentNumber"; //need
        public static readonly string DATEOFBIRTH = "DateOfBirth"; //need
        public static readonly string COUNTRYCODE = "CountryCode"; //need
        public static readonly string MOBILENUMBER = "MobileNumber"; //need
        public static readonly string PAYMENTMETHODSTATUS = "PaymentMethodStatus"; //need
        public static readonly string PAYMENTDOCURL = "PaymentDocURL"; //how tf?
        public static readonly string ADDITIONALMESSAGE = "AdditionalMessage"; //need
        #endregion

        #region Constructor
        public AppointmentRequestCount()
        {
        }
        #endregion

        #region Primitive Properties

        private long _pkId;

        [DataMember]
        public long PkId
        {
            get
            {
                return _pkId;
            }
            set
            {
                if (_pkId == value)
                {
                    return;
                }

                _pkId = value;
#if SILVERLIGHT
    			OnPropertyChanged(PKID);
#endif
            }
        }

        private byte _recordState;

        [DataMember]
        public byte RecordState
        {
            get
            {
                return _recordState;
            }
            set
            {
                if (_recordState == value)
                {
                    return;
                }

                _recordState = value;
#if SILVERLIGHT
    			OnPropertyChanged(RECORDSTATE);
#endif
            }
        }

        private byte[] _rowVersion;

        [DataMember]
        public byte[] RowVersion
        {
            get
            {
                return _rowVersion;
            }
            set
            {
                if (_rowVersion == value)
                {
                    return;
                }

                _rowVersion = value;
#if SILVERLIGHT
    			OnPropertyChanged(ROWVERSION);
#endif
            }
        }

        private Nullable<System.DateTimeOffset> _dateRequested;

        [DataMember]
        public Nullable<System.DateTimeOffset> DateRequested
        {
            get
            {
                if (_dateRequested == null) return null;
#if SILVERLIGHT
    			return _dateTimeCreated.Value.ToLocalTime();
#else
                return _dateRequested;
#endif
            }
            set
            {
                if (_dateRequested == value && (value != null && _dateRequested != null && value.Value.Offset == _dateRequested.Value.Offset))
                {
                    return;
                }

                _dateRequested = value;
#if SILVERLIGHT
    			 OnPropertyChanged(DATETIMECREATED);
#endif
            }
        }

        private System.Guid _patientId;

        [DataMember]
        public System.Guid PatientId
        {
            get
            {
                return _patientId;
            }
            set
            {
                if (_patientId == value)
                {
                    return;
                }

                _patientId = value;
#if SILVERLIGHT
    			 OnPropertyChanged(PATIENTID);
#endif
            }
        }

        private long _patientHash;

        [DataMember]
        public long PatientHash
        {
            get
            {
                return _patientHash;
            }
            set
            {
                if (_patientHash == value)
                {
                    return;
                }
                _patientHash = value;
#if SILVERLIGHT
                OnPropertyChanged(PATIENTHASH);
#endif
            }
        }

        private System.DateTimeOffset _startDateTime;

        [DataMember]
        public System.DateTimeOffset StartDateTime
        {
            get
            {
#if SILVERLIGHT
    			return _startDateTime.ToLocalTime();
#else
                return _startDateTime;
#endif
            }
            set
            {
                if (_startDateTime == value && value.Offset == _startDateTime.Offset)
                {
                    return;
                }

                _startDateTime = value;
#if SILVERLIGHT
    			 OnPropertyChanged(STARTDATETIME);
#endif
            }
        }

        private Nullable<System.DateTimeOffset> _endDateTime;

        [DataMember]
        public Nullable<System.DateTimeOffset> EndDateTime
        {
            get
            {
                if (_endDateTime == null) return null;
#if SILVERLIGHT
    			return _endDateTime.Value.ToLocalTime();
#else
                return _endDateTime;
#endif
            }
            set
            {
                if (_endDateTime == value && (value != null && _endDateTime != null && value.Value.Offset == _endDateTime.Value.Offset))
                {
                    return;
                }

                _endDateTime = value;
#if SILVERLIGHT
    			 OnPropertyChanged(ENDDATETIME);
#endif
            }
        }

        private Nullable<int> _onBehalfStatus;

        [DataMember]
        public Nullable<int> OnBehalfStatus
        {
            get
            {
                return _onBehalfStatus;
            }
            set
            {
                if (_onBehalfStatus == value)
                {
                    return;
                }
                _onBehalfStatus = value;
#if SILVERLIGHT
                OnPropertyChanged(ONBEHALFSTATUS);
#endif
            }
        }

        private string _reqLastName;

        [DataMember]
        public string ReqLastName
        {
            get
            {
                return _reqLastName;
            }
            set
            {
                if (_reqLastName == value)
                {
                    return;
                }

                _reqLastName = value;
#if SILVERLIGHT
    			 OnPropertyChanged(NAME);
#endif
            }
        }

        private string _lastName;

        [DataMember]
        public string LastName
        {
            get
            {

                return _lastName;
            }

            set
            {
                if (_lastName == value)
                {
                    return;
                }

                _lastName = value;

#if SILVERLIGHT
    			 OnPropertyChanged(LASTNAME);
#endif
            }

        }

        private string _identityDocumentNumber;

        [DataMember]
        public string IdentityDocumentNumber
        {
            get
            {

                return _identityDocumentNumber;
            }

            set
            {
                if (_identityDocumentNumber == value)
                {
                    return;
                }

                _identityDocumentNumber = value;

#if SILVERLIGHT
    			 OnPropertyChanged(IDENTITYDOCUMENTNUMBER);
#endif
            }

        }

        private Nullable<System.DateTime> _dateOfBirth;

        [DataMember]
        public Nullable<System.DateTime> DateOfBirth
        {
            get
            {

                return _dateOfBirth;
            }

            set
            {
                if (_dateOfBirth == value)
                {
                    return;
                }

                _dateOfBirth = value;

#if SILVERLIGHT
    			 OnPropertyChanged(DATEOFBIRTH);
#endif
            }

        }

        private string _countryCode;

        [DataMember]
        public string CountryCode
        {
            get
            {
                return _countryCode;
            }
            set
            {
                if (_countryCode == value)
                {
                    return;
                }
                _countryCode = value;
#if SILVERLIGHT
                OnPropertyChanged(COUNTRYCODE);
#endif
            }
        }


        private string _mobileNumber;

        [DataMember]
        public string MobileNumber
        {
            get
            {

                return _mobileNumber;
            }

            set
            {
                if (_mobileNumber == value)
                {
                    return;
                }

                _mobileNumber = value;

#if SILVERLIGHT
    			 OnPropertyChanged(MOBILENUMBER);
#endif
            }

        }

        private Nullable<int> _paymentMethodStatus;

        [DataMember]
        public Nullable<int> PaymentMethodStatus
        {
            get
            {
                return _paymentMethodStatus;
            }
            set
            {
                if (_paymentMethodStatus == value)
                {
                    return;
                }
                _paymentMethodStatus = value;
            }
        }

        private Nullable<System.Guid> _paymentDocURL;

        [DataMember]
        public Nullable<System.Guid> PaymentDocURL
        {
            get
            {
                return _paymentDocURL;
            }
            set
            {
                if (_paymentDocURL == value)
                {
                    return;
                }
                _paymentDocURL = value;
#if SILVERLIGHT
                OnPropertyChanged(PAYMENTDOCURL);
#endif
            }
        }

        private string _additionalMessage;

        [DataMember]
        public string AdditionalMessage
        {
            get
            {
                return _additionalMessage;
            }
            set
            {
                if (_additionalMessage == value)
                {
                    return;
                }
                _additionalMessage = value;
#if SILVERLIGHT
                OnPropertyChanged(ADDITIONALMESSAGE);
#endif
            }
        }

        //RequestCount ??
        //HardwareId ??

        #endregion
    }
}
