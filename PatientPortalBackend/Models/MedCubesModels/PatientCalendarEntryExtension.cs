//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using PatientPortalBackend.Models.MedCubesModels;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace MedCubes.Appointment.Server.Models.MedCubesModels
{
    /// <summary>
    /// Dto for transfering data over the wire.
    /// </summary>
    [DataContract(Name = "PatientCalendarEntryDto", Namespace = "http://MedCubes.Appointment.Server.Models")]
    public partial class PatientCalendarEntryDto 
    {  
    	
        [DataMember(Name="X1")]    	
        public long PkId {get; set;}
    	
        [DataMember(Name="X2")]    	
        public System.Guid PatientCalendarEntryID {get; set;}
    	
        //[DataMember(Name="X3")]    	
        //public long CustomerId {get; set;}
    	
        //[DataMember(Name="X4")]    	
        //public long TenantId {get; set;}
    	
        //[DataMember(Name="X5")]    	
        //public byte RecordState {get; set;}
    	
        //[DataMember(Name="X6")]    	
        //public byte[] RowVersion {get; set;}
    	
        //[DataMember(Name="X7")]    	
        //public string Name {get; set;}
    	
        [DataMember(Name="X8")]    	
        public System.DateTimeOffset StartDateTime {get; set;}
    	
        [DataMember(Name="X9")]    	
        public Nullable<System.DateTimeOffset> EndDateTime {get; set;}
    	
        //[DataMember(Name="X10")]    	
        //public string AdditionalInfo {get; set;}
    	
        //[DataMember(Name="X11")]    	
        //public System.Guid PatientId {get; set;}
       
        //[DataMember(Name=xyz)]
        //public String SendingTime {get; set;}  
    
        /// <summary>
        /// This method creates a new domainbasemodel and moves the values of the 
        /// matching properties from the current dto to the domainbasemodel.
        /// </summary>
        
    }
    
    public partial class PatientCalendarEntry 
    {
        //public override string GetHistoryKey()
        //{
        //	throw new NotImplementedException("GetHistoryKey not implemented!");
        //}
        
        
        /// <summary>
        /// This method creates a new dto and moves the values of the 
        /// matching properties from the current domainbasemodel to the dto.
        /// </summary>
        public PatientCalendarEntryDto ToDto()
        {
           var dto = new PatientCalendarEntryDto();
           dto.PkId = PkId;
           dto.PatientCalendarEntryID = PatientCalendarEntryID;
           //dto.CustomerId = CustomerId;
           //dto.TenantId = TenantId;
           //dto.RecordState = RecordState;
           //dto.RowVersion = RowVersion;
           //dto.Name = Name;
           dto.StartDateTime = StartDateTime;
           dto.EndDateTime = EndDateTime;
           //dto.AdditionalInfo = AdditionalInfo;
           //dto.PatientId = PatientId;
         
           
           return dto;
        }
        
     
        /// <summary>
        /// Possible relations to resources
        /// </summary>
        private List<PatientCalendarEntryResourceRelationship> _resourceRelationshipList;
        [DataMember]
        public List<PatientCalendarEntryResourceRelationship> ResourceRelationshipList
        {
            get { return _resourceRelationshipList; }
            set
            {
                if (_resourceRelationshipList == value)
                    return;
                _resourceRelationshipList = value;

#if SILVERLIGHT
                OnPropertyChanged("ResourceRelationshipList");
#endif
            }
        }


        /// <summary>
        /// Possible PkId´s from all resources (also deleted)
        /// </summary>
        private List<long> _resourceAlsoDeletedPkIdList;
        [DataMember]
        public List<long> ResourceAlsoDeletedPkIdList
        {
            get { return _resourceAlsoDeletedPkIdList; }
            set
            {
                if (_resourceAlsoDeletedPkIdList == value)
                    return;
                _resourceAlsoDeletedPkIdList = value;

#if SILVERLIGHT
                OnPropertyChanged("ResourceAlsoDeletedPkIdList");
#endif
            }
        }


        /// <summary>
        /// Name of the Patient.
        /// Only used in rare cases (appointment overview for all patients).
        /// </summary>
        private string _patientName;
        [DataMember]
        public string PatientName
        {
            get { return _patientName; }
            set
            {
                if (_patientName == value)
                    return;
                _patientName = value;
#if SILVERLIGHT
                OnPropertyChanged("PatientName");
#endif
            }
        }

        /// <summary>
        /// Name of the creating User.
        /// </summary>
        private string _createUserName;
        [DataMember]
        public string CreateUserName
        {
            get { return _createUserName; }
            set
            {
                if (_createUserName == value)
                    return;
                _createUserName = value;
#if SILVERLIGHT
                OnPropertyChanged("CreateUserName");
#endif
            }
        }

        /// <summary>
        /// Name of the service unit.
        /// </summary>
        private string _serviceUnitName;
        [DataMember]
        public string ServiceUnitName
        {
            get { return _serviceUnitName; }
            set
            {
                if (_serviceUnitName == value)
                    return;
                _serviceUnitName = value;
#if SILVERLIGHT
                OnPropertyChanged("ServiceUnitName");
#endif

            }
        }

        /// <summary>
        /// Name of the resource person.
        /// </summary>
        private string _resourcePerson;
        [DataMember]
        public string ResourcePerson
        {
            get { return _resourcePerson; }
            set
            {
                if (_resourcePerson == value)
                    return;
                _resourcePerson = value;
#if SILVERLIGHT
                OnPropertyChanged("ResourcePerson");
#endif

            }
        }

        /// <summary>
        /// Name of the resource room.
        /// </summary>
        private string _resourceRoom;
        [DataMember]
        public string ResourceRoom
        {
            get { return _resourceRoom; }
            set
            {
                if (_resourceRoom == value)
                    return;
                _resourceRoom = value;
#if SILVERLIGHT
                OnPropertyChanged("ResourceRoom");
#endif

            }
        }

        /// <summary>
        /// Name of the resource equipment.
        /// </summary>
        private string _resourceEquipment;
        [DataMember]
        public string ResourceEquipment
        {
            get { return _resourceEquipment; }
            set
            {
                if (_resourceEquipment == value)
                    return;
                _resourceEquipment = value;
#if SILVERLIGHT
                OnPropertyChanged("ResourceEquipment");
#endif

            }
        }

        /// <summary>
        /// Id of the resource person.
        /// </summary>
        private List<long> _resourceIdListPerson;
        [DataMember]
        public List<long> ResourceIdListPerson
        {
            get { return _resourceIdListPerson; }
            set
            {
                if (_resourceIdListPerson == value)
                    return;
                _resourceIdListPerson = value;
#if SILVERLIGHT
                OnPropertyChanged("ResourceIdListPerson");
#endif

            }
        }

        /// <summary>
        /// Name of the resource equipment.
        /// </summary>
        private string _infoOnlyUserResourceName;
        [DataMember]
        public string InfoOnlyUserResourceName
        {
            get { return _infoOnlyUserResourceName; }
            set
            {
                if (_infoOnlyUserResourceName == value)
                    return;
                _infoOnlyUserResourceName = value;
#if SILVERLIGHT
                OnPropertyChanged("InfoOnlyUserResourceName");
#endif

            }
        }

    }
}
