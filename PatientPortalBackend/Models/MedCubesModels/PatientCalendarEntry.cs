//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using PatientPortalBackend.Models.MedCubesModels.Core;

#if SILVERLIGHT
#endif
using System.ComponentModel.DataAnnotations;


namespace MedCubes.Appointment.Server.Models.MedCubesModels
{
    /// <summary>
    /// Attention!!!
    /// Place new functionality into separate partial class as this class-file will be recreated
    /// if tt procedure is executed again (your modifications would be lost)!
    /// </summary>
    [DataContract(Name = "PatientCalendarEntry", Namespace = "www.Ahcs.co/MedCubes/models")]

    public partial class PatientCalendarEntry : DomainBaseModel
    {
        #region Constants
    	public static readonly string PKID = "PkId";
    	public static readonly string PATIENTCALENDARENTRYID = "PatientCalendarEntryID";
    	public static readonly string CUSTOMERID = "CustomerId";
    	public static readonly string TENANTID = "TenantId";
    	public static readonly string RECORDSTATE = "RecordState";
    	public static readonly string ROWVERSION = "RowVersion";
    	public static readonly string NAME = "Name";
    	public static readonly string STARTDATETIME = "StartDateTime";
    	public static readonly string ENDDATETIME = "EndDateTime";
    	public static readonly string ADDITIONALINFO = "AdditionalInfo";
    	public static readonly string PATIENTID = "PatientId";
    	public static readonly string ENTRYTYPEID = "EntryTypeId";
    	public static readonly string SERVICEUNITID = "ServiceUnitId";
    	public static readonly string PLANNINGSTATE = "PlanningState";
    	public static readonly string SERVICEID = "ServiceId";
    	public static readonly string SERIESID = "SeriesId";
    	public static readonly string SERIESDEFINITION = "SeriesDefinition";
    	public static readonly string UPDATEREASON = "UpdateReason";
    	public static readonly string UPDATEREASONTYPE = "UpdateReasonType";
    	public static readonly string CANCELREASONTYPE = "CancelReasonType";
    	public static readonly string INFOONLYUSERRESOURCEID = "InfoOnlyUserResourceId";
    	public static readonly string LINKID = "LinkId";
    	public static readonly string DATETIMEMODIFIED = "DateTimeModified";
    	public static readonly string ABSTRACTBACKUPNO = "AbstractBackupNo";
    	public static readonly string ABSTRACTBACKUPSEQ = "AbstractBackupSeq";
    	public static readonly string CANCELREASON = "CancelReason";
    	public static readonly string NPO = "Npo";
    	public static readonly string DATETIMECREATED = "DateTimeCreated";
    	public static readonly string APPOINTMENTMODE = "AppointmentMode";
    	public static readonly string ISWARNING = "IsWarning";
    	public static readonly string SPECIALITY = "Speciality";
    	public static readonly string PLANNINGSTATEDATETIME = "PlanningStateDateTime";
    	public static readonly string CREATEUSERID = "CreateUserId";
    	public static readonly string ISADDITIONALWARNING = "IsAdditionalWarning";
    	public static readonly string REASONFORSTATECHANGE = "ReasonForStateChange";
    	public static readonly string ISRESCHEDULING = "IsRescheduling";
    	public static readonly string REFERENCEMODEL = "ReferenceModel";
    	public static readonly string REFERENCEID = "ReferenceId";
        public static readonly string INDIVIDUALCOLOR = "IndividualColor";
        #endregion

        #region Constructor
    	public PatientCalendarEntry()
    	{	 
        }
        #endregion
    	 
        #region Primitive Properties
    	
    	private long _pkId;
      
    	[DataMember]	
    	public  long PkId
        {    
            get 
    		{	
    			return _pkId;
    		}
            set
    		{
    			if(_pkId == value)
    			{
    				return;
    			}
    						
    			_pkId = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(PKID);
    			 #endif
    		}
        }
    	
    	private System.Guid _patientCalendarEntryID;
        
    	[DataMember]	
    	public  System.Guid PatientCalendarEntryID
        {    
            get 
    		{	
    			return _patientCalendarEntryID;
    		}
            set
    		{
    			if(_patientCalendarEntryID == value)
    			{
    				return;
    			}
    						
    			_patientCalendarEntryID = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(PATIENTCALENDARENTRYID);
    			 #endif
    		}
        }
    	
    	private byte _recordState;
        
    	[DataMember]	
    	public  byte RecordState
        {    
            get 
    		{	
    			return _recordState;
    		}
            set
    		{
    			if(_recordState == value)
    			{
    				return;
    			}
    						
    			_recordState = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(RECORDSTATE);
    			 #endif
    		}
        }
    	
    	private byte[] _rowVersion;
        
    	[DataMember]	
    	public  byte[] RowVersion
        {    
            get 
    		{	
    			return _rowVersion;
    		}
            set
    		{
    			if(_rowVersion == value)
    			{
    				return;
    			}
    						
    			_rowVersion = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(ROWVERSION);
    			 #endif
    		}
        }
    	
    	private string _name;
        
    	[DataMember]	
    	public  string Name
        {    
            get 
    		{	
    			return _name;
    		}
            set
    		{
    			if(_name == value)
    			{
    				return;
    			}
    						
    			_name = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(NAME);
    			 #endif
    		}
        }
    	
    	private System.DateTimeOffset _startDateTime;
        
    	[DataMember]	
    	public  System.DateTimeOffset StartDateTime
        {    
            get 
    		{
    		#if SILVERLIGHT
    			return _startDateTime.ToLocalTime();
    			#else
    			return _startDateTime;
    			#endif
    		}
            set
    		{
    			if (_startDateTime == value && value.Offset == _startDateTime.Offset)
    				{
    					return;
    				}
    						
    			_startDateTime = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(STARTDATETIME);
    			 #endif
    		}
        }
    	
    	private Nullable<System.DateTimeOffset> _endDateTime;
        
    	[DataMember]	
    	public  Nullable<System.DateTimeOffset> EndDateTime
        {    
            get 
    		{if(_endDateTime == null) return null;
    				#if SILVERLIGHT
    			return _endDateTime.Value.ToLocalTime();
    			#else
    			return _endDateTime;
    			#endif
    			}
            set
    		{
    			if (_endDateTime == value && (value != null && _endDateTime != null && value.Value.Offset == _endDateTime.Value.Offset))
    			{
    				return;
    			}
    						
    			_endDateTime = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(ENDDATETIME);
    			 #endif
    		}
        }
    	
    	private string _additionalInfo;
        
    	[DataMember]	
    	public  string AdditionalInfo
        {    
            get 
    		{	
    			return _additionalInfo;
    		}
            set
    		{
    			if(_additionalInfo == value)
    			{
    				return;
    			}
    						
    			_additionalInfo = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(ADDITIONALINFO);
    			 #endif
    		}
        }
    	
    	private System.Guid _patientId;
        
    	[DataMember]	
    	public  System.Guid PatientId
        {    
            get 
    		{	
    			return _patientId;
    		}
            set
    		{
    			if(_patientId == value)
    			{
    				return;
    			}
    						
    			_patientId = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(PATIENTID);
    			 #endif
    		}
        }
    	
    	private Nullable<int> _entryTypeId;
        
    	[DataMember]	
    	public  Nullable<int> EntryTypeId
        {    
            get 
    		{	
    			return _entryTypeId;
    		}
            set
    		{
    			if(_entryTypeId == value)
    			{
    				return;
    			}
    						
    			_entryTypeId = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(ENTRYTYPEID);
    			 #endif
    		}
        }
    	
    	private Nullable<long> _serviceUnitId;
        
    	[DataMember]	
    	public  Nullable<long> ServiceUnitId
        {    
            get 
    		{	
    			return _serviceUnitId;
    		}
            set
    		{
    			if(_serviceUnitId == value)
    			{
    				return;
    			}
    						
    			_serviceUnitId = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(SERVICEUNITID);
    			 #endif
    		}
        }
    	
    	private Nullable<int> _planningState;
        
    	[DataMember]	
    	public  Nullable<int> PlanningState
        {    
            get 
    		{	
    			return _planningState;
    		}
            set
    		{
    			if(_planningState == value)
    			{
    				return;
    			}
    						
    			_planningState = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(PLANNINGSTATE);
    			 #endif
    		}
        }
    	
    	private Nullable<System.Guid> _serviceId;
        
    	[DataMember]	
    	public  Nullable<System.Guid> ServiceId
        {    
            get 
    		{	
    			return _serviceId;
    		}
            set
    		{
    			if(_serviceId == value)
    			{
    				return;
    			}
    						
    			_serviceId = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(SERVICEID);
    			 #endif
    		}
        }
    	
    	private Nullable<System.Guid> _seriesId;
        
    	[DataMember]	
    	public  Nullable<System.Guid> SeriesId
        {    
            get 
    		{	
    			return _seriesId;
    		}
            set
    		{
    			if(_seriesId == value)
    			{
    				return;
    			}
    						
    			_seriesId = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(SERIESID);
    			 #endif
    		}
        }
    	
    	private string _seriesDefinition;
        
    	[DataMember]	
    	public  string SeriesDefinition
        {    
            get 
    		{	
    			return _seriesDefinition;
    		}
            set
    		{
    			if(_seriesDefinition == value)
    			{
    				return;
    			}
    						
    			_seriesDefinition = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(SERIESDEFINITION);
    			 #endif
    		}
        }
    	
    	private string _updateReason;
        
    	[DataMember]	
    	public  string UpdateReason
        {    
            get 
    		{	
    			return _updateReason;
    		}
            set
    		{
    			if(_updateReason == value)
    			{
    				return;
    			}
    						
    			_updateReason = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(UPDATEREASON);
    			 #endif
    		}
        }
    	
    	private Nullable<int> _updateReasonType;
        
    	[DataMember]	
    	public  Nullable<int> UpdateReasonType
        {    
            get 
    		{	
    			return _updateReasonType;
    		}
            set
    		{
    			if(_updateReasonType == value)
    			{
    				return;
    			}
    						
    			_updateReasonType = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(UPDATEREASONTYPE);
    			 #endif
    		}
        }
    	
    	private Nullable<int> _cancelReasonType;
        
    	[DataMember]	
    	public  Nullable<int> CancelReasonType
        {    
            get 
    		{	
    			return _cancelReasonType;
    		}
            set
    		{
    			if(_cancelReasonType == value)
    			{
    				return;
    			}
    						
    			_cancelReasonType = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(CANCELREASONTYPE);
    			 #endif
    		}
        }
    	
    	private Nullable<System.Guid> _infoOnlyUserResourceId;
        
    	[DataMember]	
    	public  Nullable<System.Guid> InfoOnlyUserResourceId
        {    
            get 
    		{	
    			return _infoOnlyUserResourceId;
    		}
            set
    		{
    			if(_infoOnlyUserResourceId == value)
    			{
    				return;
    			}
    						
    			_infoOnlyUserResourceId = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(INFOONLYUSERRESOURCEID);
    			 #endif
    		}
        }
    	
    	private Nullable<System.Guid> _linkId;
        
    	[DataMember]	
    	public  Nullable<System.Guid> LinkId
        {    
            get 
    		{	
    			return _linkId;
    		}
            set
    		{
    			if(_linkId == value)
    			{
    				return;
    			}
    						
    			_linkId = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(LINKID);
    			 #endif
    		}
        }
    	
    	private Nullable<System.DateTimeOffset> _dateTimeModified;
        
    	[DataMember]	
    	public  Nullable<System.DateTimeOffset> DateTimeModified
        {    
            get 
    		{if(_dateTimeModified == null) return null;
    				#if SILVERLIGHT
    			return _dateTimeModified.Value.ToLocalTime();
    			#else
    			return _dateTimeModified;
    			#endif
    			}
            set
    		{
    			if (_dateTimeModified == value && (value != null && _dateTimeModified != null && value.Value.Offset == _dateTimeModified.Value.Offset))
    			{
    				return;
    			}
    						
    			_dateTimeModified = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(DATETIMEMODIFIED);
    			 #endif
    		}
        }
    	
    	private string _abstractBackupNo;
        
    	[DataMember]	
    	public  string AbstractBackupNo
        {    
            get 
    		{	
    			return _abstractBackupNo;
    		}
            set
    		{
    			if(_abstractBackupNo == value)
    			{
    				return;
    			}
    						
    			_abstractBackupNo = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(ABSTRACTBACKUPNO);
    			 #endif
    		}
        }
    	
    	private Nullable<int> _abstractBackupSeq;
        
    	[DataMember]	
    	public  Nullable<int> AbstractBackupSeq
        {    
            get 
    		{	
    			return _abstractBackupSeq;
    		}
            set
    		{
    			if(_abstractBackupSeq == value)
    			{
    				return;
    			}
    						
    			_abstractBackupSeq = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(ABSTRACTBACKUPSEQ);
    			 #endif
    		}
        }
    	
    	private string _cancelReason;
        
    	[DataMember]	
    	public  string CancelReason
        {    
            get 
    		{	
    			return _cancelReason;
    		}
            set
    		{
    			if(_cancelReason == value)
    			{
    				return;
    			}
    						
    			_cancelReason = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(CANCELREASON);
    			 #endif
    		}
        }
    	
    	private string _npo;
        
    	[DataMember]	
    	public  string Npo
        {    
            get 
    		{	
    			return _npo;
    		}
            set
    		{
    			if(_npo == value)
    			{
    				return;
    			}
    						
    			_npo = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(NPO);
    			 #endif
    		}
        }
    	
    	private Nullable<System.DateTimeOffset> _dateTimeCreated;
        
    	[DataMember]	
    	public  Nullable<System.DateTimeOffset> DateTimeCreated
        {    
            get 
    		{if(_dateTimeCreated == null) return null;
    				#if SILVERLIGHT
    			return _dateTimeCreated.Value.ToLocalTime();
    			#else
    			return _dateTimeCreated;
    			#endif
    			}
            set
    		{
    			if (_dateTimeCreated == value && (value != null && _dateTimeCreated != null && value.Value.Offset == _dateTimeCreated.Value.Offset))
    			{
    				return;
    			}
    						
    			_dateTimeCreated = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(DATETIMECREATED);
    			 #endif
    		}
        }
    	
    	private Nullable<int> _appointmentMode;
        
    	[DataMember]	
    	public  Nullable<int> AppointmentMode
        {    
            get 
    		{	
    			return _appointmentMode;
    		}
            set
    		{
    			if(_appointmentMode == value)
    			{
    				return;
    			}
    						
    			_appointmentMode = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(APPOINTMENTMODE);
    			 #endif
    		}
        }
    	
    	private bool _isWarning;
        
    	[DataMember]	
    	public  bool IsWarning
        {    
            get 
    		{	
    			return _isWarning;
    		}
            set
    		{
    			if(_isWarning == value)
    			{
    				return;
    			}
    						
    			_isWarning = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(ISWARNING);
    			 #endif
    		}
        }
    	
    	private Nullable<int> _speciality;
        
    	[DataMember]	
    	public  Nullable<int> Speciality
        {    
            get 
    		{	
    			return _speciality;
    		}
            set
    		{
    			if(_speciality == value)
    			{
    				return;
    			}
    						
    			_speciality = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(SPECIALITY);
    			 #endif
    		}
        }
    	
    	private Nullable<System.DateTimeOffset> _planningStateDateTime;
        
    	[DataMember]	
    	public  Nullable<System.DateTimeOffset> PlanningStateDateTime
        {    
            get 
    		{if(_planningStateDateTime == null) return null;
    				#if SILVERLIGHT
    			return _planningStateDateTime.Value.ToLocalTime();
    			#else
    			return _planningStateDateTime;
    			#endif
    			}
            set
    		{
    			if (_planningStateDateTime == value && (value != null && _planningStateDateTime != null && value.Value.Offset == _planningStateDateTime.Value.Offset))
    			{
    				return;
    			}
    						
    			_planningStateDateTime = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(PLANNINGSTATEDATETIME);
    			 #endif
    		}
        }
    	
    	private Nullable<long> _createUserId;
        
    	[DataMember]	
    	public  Nullable<long> CreateUserId
        {    
            get 
    		{	
    			return _createUserId;
    		}
            set
    		{
    			if(_createUserId == value)
    			{
    				return;
    			}
    						
    			_createUserId = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(CREATEUSERID);
    			 #endif
    		}
        }
    	
    	private bool _isAdditionalWarning;
        
    	[DataMember]	
    	public  bool IsAdditionalWarning
        {    
            get 
    		{	
    			return _isAdditionalWarning;
    		}
            set
    		{
    			if(_isAdditionalWarning == value)
    			{
    				return;
    			}
    						
    			_isAdditionalWarning = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(ISADDITIONALWARNING);
    			 #endif
    		}
        }
    	
    	private Nullable<int> _reasonForStateChange;
        
    	[DataMember]	
    	public  Nullable<int> ReasonForStateChange
        {    
            get 
    		{	
    			return _reasonForStateChange;
    		}
            set
    		{
    			if(_reasonForStateChange == value)
    			{
    				return;
    			}
    						
    			_reasonForStateChange = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(REASONFORSTATECHANGE);
    			 #endif
    		}
        }
    	
    	private bool _isRescheduling;
        
    	[DataMember]	
    	public  bool IsRescheduling
        {    
            get 
    		{	
    			return _isRescheduling;
    		}
            set
    		{
    			if(_isRescheduling == value)
    			{
    				return;
    			}
    						
    			_isRescheduling = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(ISRESCHEDULING);
    			 #endif
    		}
        }
    	
    	private string _referenceModel;
        
    	[DataMember]	
    	public  string ReferenceModel
        {    
            get 
    		{	
    			return _referenceModel;
    		}
            set
    		{
    			if(_referenceModel == value)
    			{
    				return;
    			}
    						
    			_referenceModel = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(REFERENCEMODEL);
    			 #endif
    		}
        }
    	
    	private string _referenceId;
        
    	[DataMember]	
    	public  string ReferenceId
        {    
            get 
    		{	
    			return _referenceId;
    		}
            set
    		{
    			if(_referenceId == value)
    			{
    				return;
    			}
    						
    			_referenceId = value;
    			 #if SILVERLIGHT
    			 OnPropertyChanged(REFERENCEID);
    			 #endif
    		}
        }

        private Nullable<int> _individualColor;
        
        [DataMember]	
        public  Nullable<int> IndividualColor
        {    
            get 
            {	
                return _individualColor;
            }
            set
            {
                if(_individualColor == value)
                {
                    return;
                }
    						
                _individualColor = value;
#if SILVERLIGHT
                OnPropertyChanged(INDIVIDUALCOLOR);
#endif
            }
        }

        #endregion

    }
}
