//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using PatientPortalBackend.Models.MedCubesModels;
using PatientPortalBackend.Models.MedCubesModels.Core;


namespace PatientPortalBackend.Models.MedCubesModels
{
    /// <summary>
    /// Attention!!!
    /// Place new functionality into separate partial class as this class-file will be recreated
    /// if tt procedure is executed again (your modifications would be lost)!
    /// </summary>
    [DataContract(Name = "TenantOfUser", Namespace = "MedCubes.Framework.Models")]
    public partial class TenantOfUser : DomainBaseModel 
    {  
        #region Constants
    	public static readonly string TENANTOFUSERID = "TenantOfUserId";
    	public static readonly string CUSTOMERID = "CustomerId";
    	public static readonly string TENANTID = "TenantId";
    	public static readonly string USERID = "UserId";
    	public static readonly string RECORDSTATE = "RecordState";
    	public static readonly string ROWVERSION = "RowVersion";
    	public static readonly string ISDEFAULTTENANT = "IsDefaultTenant";
    	public static readonly string USERCODE = "UserCode";

        #endregion

    
        #region Constructor
    
    	public TenantOfUser()
    	{	 
    	
    	}
    	 
        #endregion

    	 
        #region Primitive Properties
    	
    	private long _tenantOfUserId;
        
    	[DataMember]	
    	public  long TenantOfUserId
        {    
          get 
    	  {		
       		 return _tenantOfUserId;
    	  }	
          set
    	  {
    			if(_tenantOfUserId == value) return;	
    		   _tenantOfUserId = value;			 
    		   #if SILVERLIGHT
    		   OnPropertyChanged(TENANTOFUSERID);
    		   #endif
    	}
        }
    	
    	private long _userId;
        
    	[DataMember]	
    	public  long UserId
        {    
          get 
    	  {		
       		 return _userId;
    	  }	
          set
    	  {
    			if(_userId == value) return;	
    		   _userId = value;			 
    		   #if SILVERLIGHT
    		   OnPropertyChanged(USERID);
    		   #endif
    	}
        }
    	
    	private byte _recordState;
        
    	[DataMember]	
    	public  byte RecordState
        {    
          get 
    	  {		
       		 return _recordState;
    	  }	
          set
    	  {
    			if(_recordState == value) return;	
    		   _recordState = value;			 
    		   #if SILVERLIGHT
    		   OnPropertyChanged(RECORDSTATE);
    		   #endif
    	}
        }
    	
    	private byte[] _rowVersion;
        
    	[DataMember]	
    	public  byte[] RowVersion
        {    
          get 
    	  {		
       		 return _rowVersion;
    	  }	
          set
    	  {
    			if(_rowVersion == value) return;	
    		   _rowVersion = value;			 
    		   #if SILVERLIGHT
    		   OnPropertyChanged(ROWVERSION);
    		   #endif
    	}
        }
    	
    	private bool _isDefaultTenant;
        
    	[DataMember]	
    	public  bool IsDefaultTenant
        {    
          get 
    	  {		
       		 return _isDefaultTenant;
    	  }	
          set
    	  {
    			if(_isDefaultTenant == value) return;	
    		   _isDefaultTenant = value;			 
    		   #if SILVERLIGHT
    		   OnPropertyChanged(ISDEFAULTTENANT);
    		   #endif
    	}
        }
    	
    	private string _userCode;
        
    	[DataMember]	
    	public  string UserCode
        {    
          get 
    	  {		
       		 return _userCode;
    	  }	
          set
    	  {
    			if(_userCode == value) return;	
    		   _userCode = value;			 
    		   #if SILVERLIGHT
    		   OnPropertyChanged(USERCODE);
    		   #endif
    	}
        }

        #endregion

        #region Navigation Properties
    
    		 
    		
      
    	[JsonIgnore]
        public  Tenant Tenant
        {
            get; set; 
        }    
    
    		 
    		
      
    	[JsonIgnore]
        public  User User
        {
            get; set; 
        }    

        #endregion

    }
}
